// Script para testar atualiza√ß√£o de perfil
// Execute com: node scripts/test-profile-update.js

const API_BASE = 'http://localhost:3000';

async function testProfileUpdate() {
  console.log('üß™ Testando atualiza√ß√£o de perfil...\n');

  // Primeiro, voc√™ precisa ter um token de usu√°rio v√°lido
  // Este √© um exemplo de como testar - voc√™ precisar√° de um token real
  
  const testToken = 'SEU_TOKEN_AQUI'; // Substitua por um token real
  
  if (testToken === 'SEU_TOKEN_AQUI') {
    console.log('‚ùå Voc√™ precisa fornecer um token v√°lido para testar');
    console.log('üìù Para obter um token:');
    console.log('1. Fa√ßa login no frontend');
    console.log('2. Abra o DevTools > Application > Local Storage');
    console.log('3. Procure por "supabase.auth.token"');
    console.log('4. Copie o access_token e cole aqui');
    return;
  }

  try {
    // 1. Testar busca de perfil
    console.log('1Ô∏è‚É£ Testando busca de perfil...');
    const getResponse = await fetch(`${API_BASE}/api/profile/update`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${testToken}`,
        'Content-Type': 'application/json',
      },
    });

    const getResult = await getResponse.json();
    console.log('üìã Perfil atual:', getResult);

    if (!getResponse.ok) {
      console.error('‚ùå Erro ao buscar perfil:', getResult);
      return;
    }

    // 2. Testar atualiza√ß√£o de perfil
    console.log('\n2Ô∏è‚É£ Testando atualiza√ß√£o de perfil...');
    
    const updateData = {
      first_name: 'Jo√£o',
      last_name: 'Silva',
      bio: 'Desenvolvedor Full Stack com 5 anos de experi√™ncia',
      city: 'S√£o Paulo',
      state: 'SP',
      country: 'Brasil',
      job_title: 'Senior Developer',
      company: 'Tech Corp',
      experience_years: 5,
      mentorship_topics: ['JavaScript', 'React', 'Node.js'],
      session_price_usd: 50
    };

    const updateResponse = await fetch(`${API_BASE}/api/profile/update`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${testToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData),
    });

    const updateResult = await updateResponse.json();
    console.log('üìù Resultado da atualiza√ß√£o:', updateResult);

    if (!updateResponse.ok) {
      console.error('‚ùå Erro na atualiza√ß√£o:', updateResult);
      return;
    }

    console.log('‚úÖ Perfil atualizado com sucesso!');

    // 3. Verificar se a atualiza√ß√£o foi salva
    console.log('\n3Ô∏è‚É£ Verificando se a atualiza√ß√£o foi salva...');
    
    const verifyResponse = await fetch(`${API_BASE}/api/profile/update`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${testToken}`,
        'Content-Type': 'application/json',
      },
    });

    const verifyResult = await verifyResponse.json();
    console.log('üîç Perfil ap√≥s atualiza√ß√£o:', verifyResult);

    console.log('\nüéâ Teste de atualiza√ß√£o de perfil conclu√≠do!');

  } catch (error) {
    console.error('üí• Erro durante o teste:', error);
  }
}

// Fun√ß√£o para testar upload de foto (exemplo)
async function testPhotoUpload() {
  console.log('\nüì∏ Para testar upload de foto:');
  console.log('1. Use um cliente HTTP como Postman ou Insomnia');
  console.log('2. Fa√ßa POST para http://localhost:3000/api/upload/profile-photo');
  console.log('3. Headers: Authorization: Bearer SEU_TOKEN');
  console.log('4. Body: form-data com campo "file" contendo uma imagem');
  console.log('5. A foto ser√° salva no bucket "profile-photos"');
  console.log('6. O campo avatar_url do perfil ser√° atualizado automaticamente');
}

// Executar testes
testProfileUpdate();
testPhotoUpload();
